ARM GAS  hello.S 			page 1


   1              	@filename s2earm-inst.S
   2              	.text
   3              	.arm
   4              	
   5              	
   6              	@returns version in r0
   7              	s2e_version:
   8 0000 00402DE9 	stmfd sp!,{r14}
   9 0004 000000FF 	.word 0xFF000000
  10 0008 0080BDE8 	ldmfd sp!,{r15}
  11              	
  12              	s2e_enable_symbolic:
  13 000c 00402DE9 	stmfd sp!,{r14}
  14 0010 000001FF 	.word 0xFF010000
  15 0014 0080BDE8 	ldmfd sp!,{r15}
  16              	
  17              	s2e_disable_symbolic:
  18 0018 00402DE9 	stmfd sp!,{r14}
  19 001c 000002FF 	.word 0xFF020000
  20 0020 0080BDE8 	ldmfd sp!,{r15}
  21              	
  22              	@requires r0: address
  23              	@requires r1: size
  24              	@requires r2: address to symbolic name
  25              	s2e_make_symbolic:
  26 0024 00402DE9 	stmfd sp!,{r14}
  27 0028 000003FF 	.word 0xFF030000
  28 002c 0080BDE8 	ldmfd sp!,{r15}
  29              	
  30              	@returns path id to r0
  31              	s2e_get_path_id:
  32 0030 00402DE9 	stmfd sp!,{r14}
  33 0034 000005FF 	.word 0xFF050000
  34 0038 0080BDE8 	ldmfd sp!,{r15}
  35              	
  36              	@requires r0: status code number
  37              	@requires r1: address to kill message
  38              	s2e_kill_state:
  39 003c 00402DE9 	stmfd sp!,{r14}
  40 0040 000006FF 	.word 0xFF060000
  41 0044 0080BDE8 	ldmfd sp!,{r15}
  42              	
  43              	@requires r0: expression number
  44              	@requires r1: address to symbolic name
  45              	s2e_print_expression:
  46 0048 00402DE9 	stmfd sp!,{r14}
  47 004c 000007FF 	.word 0xFF070000
  48 0050 0080BDE8 	ldmfd sp!,{r15}
  49              	
  50              	@requires r0: address
  51              	@requires r1: size
  52              	@requires r2: address to (your abitrary) name of this memory region
  53              	s2e_print_memory:
  54 0054 00402DE9 	stmfd sp!,{r14}
  55 0058 000008FF 	.word 0xFF080000
  56 005c 0080BDE8 	ldmfd sp!,{r15}
  57              	
ARM GAS  hello.S 			page 2


  58              	s2e_enable_forking:
  59 0060 00402DE9 	stmfd sp!,{r14}
  60 0064 000009FF 	.word 0xFF090000
  61 0068 0080BDE8 	ldmfd sp!,{r15}
  62              	
  63              	s2e_disable_forking:
  64 006c 00402DE9 	stmfd sp!,{r14}
  65 0070 00000AFF 	.word 0xFF0A0000
  66 0074 0080BDE8 	ldmfd sp!,{r15}
  67              	
  68              	@requires r0 to point to the address with the string to be printed
  69              	s2e_message:
  70 0078 00402DE9 	stmfd sp!,{r14}
  71 007c 000010FF 	.word 0xFF100000
  72 0080 0080BDE8 	ldmfd sp!,{r15}
  73              	
  74              	
  75              	@requires r0: address
  76              	@requires r1: size
  77              	s2e_concretize:
  78 0084 00402DE9 	stmfd sp!,{r14}
  79 0088 000020FF 	.word 0xFF200000
  80 008c 0080BDE8 	ldmfd sp!,{r15}
  81              	
  82              	@requires r0: address
  83              	@requires r1: size
  84              	s2e_get_example:
  85 0090 00402DE9 	stmfd sp!,{r14}
  86 0094 000021FF 	.word 0xFF210000
  87 0098 0080BDE8 	ldmfd sp!,{r15}
  88              	
  89              	
  90              	s2e_get_ram_object_bits:
  91 009c 00402DE9 	stmfd sp!,{r14}
  92 00a0 000052FF 	.word 0xFF520000
  93 00a4 0080BDE8 	ldmfd sp!,{r15}
  94              	
  95              	
  96              	s2e_merge_point:
  97 00a8 00402DE9 	stmfd sp!,{r14}
  98 00ac 000070FF 	.word 0xFF700000
  99 00b0 0080BDE8 	ldmfd sp!,{r15}
   1              	@filename hello.S
   2              	.global _start
   3              	.text
   4              	.arm
   5              	/***********************************************************************************
   6              	section: a range of address with no gaps.
   7              	main sections: text, data, bss.
   8              	other: absolute, undefined
   9              	
  10              	text section: contains instructions, constants, ...
  11              	data section: similar to text, but alterable.
  12              	bss section: hold uninitialized variables, common storage,
  13              	absolute section: is unrelocable (address 0 of this section maps to runtime address 0.)
  14              	
  15              	run as with the following option:
ARM GAS  hello.S 			page 3


  16              	-mcpu=arm926e
  17              	-march=armv5te
  18              	
  19              	 
  20              	************************************************************************************/
  21              	.equ testvar, 10 @just for fun
  22              	.set stackstart, 	0x7000
  23              	.set symbstart,  	0x8000
  24              	.set memstart,		0x40000
  25              	.set testvalue, 	0xDE
  26              	
  27              	/* start code */
  28              	_start:
  29 00b4 FFFFFFEA 		b init_stack
  30              	
  31              	
  32              	init_stack: @we use full descending mode (and do not care about different execution modes)
  33 00b8 0000A0E3 		mov r0, #0
  34 00bc 07DAA0E3 		mov sp, #stackstart
  35 00c0 0289A0E3 		mov r8, #symbstart
  36 00c4 FFFFFFEA 		b main
  37              	
  38              	main:
  39              	@        bl test_flags
  40              	@	bl initial_test
  41 00c8 870000EB 		bl test_mem
  42              	@	bl test_forking
  43              	@	bl switch_main
  44              	@	bl register_check
  45 00cc C40000EA 		B _idle
  46              	
  47              	register_check:
  48 00d0 00402DE9 		stmfd sp!,{r14}
  49 00d4 960000EB 		bl symbolic_int
  50              	
  51 00d8 0100A0E3 		mov r0, #1
  52 00dc 0210A0E3 		mov r1, #2
  53 00e0 0320A0E3 		mov r2, #3
  54 00e4 0430A0E3 		mov r3, #4
  55 00e8 0540A0E3 		mov r4, #5
  56 00ec 0650A0E3 		mov r5, #6
  57 00f0 0760A0E3 		mov r6, #7
  58 00f4 0870A0E3 		mov r7, #8
  59 00f8 0A90A0E3 		mov r9, #10
  60 00fc 0CB0A0E3 		mov r11, #12
  61 0100 0DC0A0E3 		mov r12, #13
  62              	
  63 0104 00A098E5 		ldr r10, [r8,#0]	@get the symbolic value
  64              	
  65 0108 00005AE3 	    cmp r10, #0			@fork state
  66 010c 0500000B 	    bleq register_check_compare
  67 0110 0400001B 	    blne register_check_compare
  68 0114 0AA0A0E3 	    mov r10, #10
  69 0118 0A005AE3 	    cmp r10, #10						@does not fork
  70 011c 2800001A 	    bne switch_error
  71 0120 C5FFFFEB 	    bl s2e_kill_state
  72 0124 0080BDE8 	    ldmfd sp!,{r15}
ARM GAS  hello.S 			page 4


  73              	
  74              	register_check_compare:
  75 0128 00402DE9 		stmfd sp!,{r14}
  76 012c 010050E3 		cmp r0, #1
  77 0130 2300001A 		bne switch_error
  78 0134 020051E3 		cmp r1, #2
  79 0138 2100001A 		bne switch_error
  80 013c 030052E3 		cmp r2, #3
  81 0140 1F00001A 		bne switch_error
  82 0144 040053E3 		cmp r3, #4
  83 0148 1D00001A 		bne switch_error
  84 014c 050054E3 		cmp r4, #5
  85 0150 1B00001A 		bne switch_error
  86 0154 060055E3 		cmp r5, #6
  87 0158 1900001A 		bne switch_error
  88 015c 070056E3 		cmp r6, #7
  89 0160 1700001A 		bne switch_error
  90 0164 080057E3 		cmp r7, #8
  91 0168 1500001A 		bne switch_error
  92 016c 0A0059E3 		cmp r9, #10
  93 0170 1300001A 		bne switch_error
  94 0174 0C005BE3 		cmp r11, #12
  95 0178 1100001A 		bne switch_error
  96 017c 0D005CE3 		cmp r12, #13
  97 0180 0F00001A 		bne switch_error
  98 0184 0080BDE8 	    ldmfd sp!,{r15}
  99              	
 100              	switch_main:
 101 0188 00402DE9 		stmfd sp!,{r14}
 102 018c 048048E2 		sub r8, r8, #4		@decrement (custom symb. value 'stack')
 103              	
 104 0190 0800A0E1 		mov r0, r8			@address of symb. value
 105 0194 0410A0E3 		mov r1, #4			@size of symb. value = 4byte
 106 0198 0020A0E3 		mov r2, #0			@name is empty (use default name)
 107 019c A0FFFFEB 	    bl s2e_make_symbolic
 108 01a0 0147A0E3 		mov r4, #memstart
 109              	
 110 01a4 00A098E5 	    ldr r10, [r8,#0]	@get the symbolic value
 111 01a8 00005AE3 	    cmp r10, #0
 112 01ac A300A013 	    movne r0, #163     @should fork into 2 states
 113 01b0 0660A0E3 	  	mov r6, #6
 114              	switch_loop:
 115 01b4 060056E3 		cmp r6, #6
 116 01b8 0100001A 		bne switch_error
 117 01bc FCFFFFEA 		b switch_loop
 118 01c0 0080BDE8 	    ldmfd sp!,{r15}
 119              	
 120              	switch_error:
 121 01c4 0600A0E1 		mov r0, r6
 122 01c8 B51F8FE2 		adr r1, statebad
 123 01cc 9AFFFFEB 		bl s2e_kill_state
 124              	
 125              	test_forking:
 126 01d0 00402DE9 		stmfd sp!,{r14}
 127 01d4 048048E2 		sub r8, r8, #4		@decrement (custom symb. value 'stack')
 128              	
 129 01d8 0800A0E1 		mov r0, r8			@address of symb. value
ARM GAS  hello.S 			page 5


 130 01dc 0410A0E3 		mov r1, #4			@size of symb. value = 4byte
 131 01e0 0020A0E3 		mov r2, #0			@name is empty (use default name)
 132 01e4 8EFFFFEB 	    bl s2e_make_symbolic
 133 01e8 0147A0E3 		mov r4, #memstart
 134              	
 135 01ec 00A098E5 	    ldr r10, [r8,#0]	@get the symbolic value
 136 01f0 00005AE3 	    cmp r10, #0
 137 01f4 A300A0A3 	    movge r0, #163     @should fork into 2 states
 138              	
 139 01f8 8CFFFFEB 		bl s2e_get_path_id
 140 01fc 0050A0E1 		mov r5, r0
 141              	
 142 0200 A21F8FE2 		adr r1, labelreg5
 143 0204 8FFFFFEB 		bl s2e_print_expression
 144              	
 145              	
 146 0208 045084E4 		str r5, [r4],#+4
 147 020c 045084E4 		str r5, [r4],#+4
 148 0210 020000EB 	    bl compareMem
 149              	
 150              	
 151 0214 211E8FE2 		adr r1, symbtest
 152 0218 87FFFFEB 		bl s2e_kill_state
 153 021c 0080BDE8 	    ldmfd sp!,{r15}
 154              	
 155              	compareMem:
 156 0220 01402DE9 		stmfd sp!,{r0, r14}
 157 0224 084044E2 		sub r4, r4, #8
 158              	
 159 0228 0400A0E1 		mov r0, r4
 160 022c 951F8FE2 		adr r1, adrafter
 161 0230 84FFFFEB 		bl s2e_print_expression
 162              	
 163              	
 164 0234 040094E4 		ldr r0, [r4],#+4
 165 0238 050050E1 		cmp r0, r5
 166 023c 6A00001A 		bne sterr  @if not, goto error
 167 0240 250000EB 		bl checkpoint
 168 0244 040094E4 		ldr r0, [r4],#+4
 169 0248 050050E1 		cmp r0, r5
 170 024c 6600001A 		bne sterr  @if not, goto error
 171 0250 0180BDE8 		ldmfd sp!,{r0, r15}
 172              	
 173              	test_flags:
 174 0254 00402DE9 		stmfd sp!,{r14}
 175 0258 0FF228E3 		msr cpsr_f, 0xF0000000 @set all flags to 1
 176 025c 0C0000EB 		bl print_status
 177 0260 00F028E3 		msr cpsr_f, 0x00000000 @set all flags to 0
 178 0264 0A0000EB 		bl print_status
 179 0268 0100A0E3 		mov r0, #1
 180 026c 010050E3 		cmp r0, #1	
 181 0270 070000EB 		bl print_status	
 182 0274 000050E0 		subs r0, r0 @z should be enabled
 183 0278 050000EB 		bl print_status
 184 027c 0000A0E3 		mov r0, #0
 185 0280 0A0050E2 		subs r0, r0, #10 @should enable n
 186 0284 020000EB 		bl print_status
ARM GAS  hello.S 			page 6


 187 0288 00F028E3 		msr cpsr_f, 0x00000000 @set all flags to 0
 188 028c 000000EB 		bl print_status
 189 0290 0080BDE8 		ldmfd sp!,{r15}
 190              	
 191              	print_status:
 192 0294 00402DE9 		stmfd sp!,{r14}
 193 0298 3E13A0E3 		mov r1, #4160749568  @mask 0xF8000000
 194 029c 00000FE1 		mrs r0, cpsr
 195 02a0 010000E0 		and r0, r0, r1
 196 02a4 631F8FE2 		adr r1, flagtest
 197 02a8 66FFFFEB 		bl s2e_print_expression
 198 02ac 0080BDE8 		ldmfd sp!,{r15}
 199              	initial_test:
 200 02b0 00402DE9 		stmfd sp!,{r14}
 201 02b4 0A00A0E3 		mov r0, #10
 202 02b8 56FFFFEB 		bl s2e_disable_symbolic
 203 02bc 52FFFFEB 		bl s2e_enable_symbolic
 204 02c0 69FFFFEB 		bl s2e_disable_forking
 205 02c4 65FFFFEB 		bl s2e_enable_forking
 206 02c8 4D0F8FE2 		adr r0, msg
 207 02cc 69FFFFEB 		bl s2e_message
 208 02d0 4AFFFFEB 		bl s2e_version
 209 02d4 0050A0E1 		mov r5, r0
 210 02d8 0080BDE8 		ldmfd sp!,{r15}
 211              	
 212              	checkpoint:
 213 02dc 00402DE9 		stmfd sp!,{r14}
 214 02e0 1B0E8FE2 		adr r0, checkmsg
 215 02e4 63FFFFEB 		bl s2e_message
 216 02e8 0080BDE8 		ldmfd sp!,{r15}
 217              	
 218              	test_mem:
 219              	   @
 220              		@registers with special roles:
 221              		@   r4  ... contains the current address to store/check
 222              		@   r5  ... contains path id of current path
 223              		@   r6  ... contains ram object bits (to build pagesize)
 224              		@   r7  ... used as a counter to limit the loop which forks the state
 225              		@   r8  ... custom stack where symbolic data is written (has to be decremented by <size of last wr
 226              		@   r9  ... contains pagesize
 227              		@
 228 02ec 20402DE9 		stmfd sp!,{r5, r14}
 229 02f0 0070A0E3 		mov r7, #0
 230 02f4 68FFFFEB 		bl s2e_get_ram_object_bits
 231 02f8 0060A0E1 		mov r6, r0
 232 02fc 0190A0E3 		mov r9, #1
 233 0300 1996A0E1 		mov r9, r9, lsl r6	@shift by ram_object_bits to get the size of the page
 234              	stm0:
 235 0304 0700A0E1 		mov r0, r7		    @print counter
 236 0308 5B1F8FE2 		adr r1, cnt		@name
 237 030c 4DFFFFEB 		bl s2e_print_expression
 238              	
 239 0310 010057E3 		cmp r7,#1     @the number represents the number of cycles in stm0
 240 0314 110000AA 		bge stm1
 241              	
 242 0318 00A0A0E3 		mov r10, #0
 243              	@ comment the following two lines to have single-state memory check /uncomment for  multi-state-mem
ARM GAS  hello.S 			page 7


 244 031c 040000EB 		bl symbolic_int
 245 0320 00A098E5 	    ldr r10, [r8,#0]	@get the symbolic value
 246              	
 247 0324 00005AE3 	    cmp r10, #0			@fork state
 248 0328 0C00000A 	    beq stm1			@one state enters stm1, the other continues
 249 032c 017087E2 	    add r7, r7, #1
 250 0330 F3FFFFEA 	    b stm0
 251              	
 252              	symbolic_int:
 253 0334 00402DE9 		stmfd sp!,{r14}
 254 0338 048048E2 		sub r8, r8, #4		@decrement (custom symb. value 'stack')
 255              	
 256 033c 0800A0E1 		mov r0, r8			@address of symb. value
 257 0340 0410A0E3 		mov r1, #4			@size of symb. value = 4byte
 258 0344 0020A0E3 		mov r2, #0			@name is empty (use default name)
 259 0348 35FFFFEB 	    bl s2e_make_symbolic
 260              	
 261 034c 0800A0E1 	    mov r0, r8
 262 0350 0410A0E3 	    mov r1, #4
 263 0354 0020A0E3 	    mov r2, #0
 264 0358 3DFFFFEB 	    bl s2e_print_memory
 265 035c 0080BDE8 	    ldmfd sp!,{r15}
 266              	
 267              	stm1:
 268 0360 32FFFFEB 		bl s2e_get_path_id
 269 0364 0050A0E1 		mov r5, r0
 270 0368 0A5085E2 		add r5, #10	
 271              	
 272 036c 0900A0E1 		mov r0, r9		@expression argument (r9 contains pagesize)
 273 0370 9F108FE2 		adr r1, val			@name
 274 0374 33FFFFEB 		bl s2e_print_expression
 275 0378 0146A0E3 		mov r4, #1048576 @ starting memory address 0x100000
 276              	stm2_restart:
 277 037c 411F8FE2 		adr r1, adrafter
 278 0380 09A0A0E1 		mov r10, r9		@(re)arm counter
 279              	stm2:
 280              		@Fill page with test pattern (path id stored in r5)
 281              	
 282 0384 045084E4 		str r5, [r4],#+4
 283              	
 284 0388 01A04AE2 		sub r10, r10, #1 @decrease counter
 285 038c 00005AE3 		cmp r10, #0
 286 0390 FBFFFF1A 		bne stm2
 287              	
 288 0394 09A0A0E1 		mov r10, r9 @reset counter
 289 0398 0AA1A0E1 		mov r10, r10, lsl #2
 290 039c 0A4044E0 		sub r4, r4, r10 @get back to memory starting address
 291              	
 292 03a0 09A0A0E1 		mov r10, r9 @reset counter
 293 03a4 74108FE2 		adr r1, mem			@name param2 for print expression
 294              	stm3:
 295              		@Check if the memory is correct
 296 03a8 040094E4 		ldr r0, [r4],#+4
 297 03ac 050050E1 		cmp r0, r5 @do we get the path id back?
 298 03b0 0D00001A 		bne sterr  @if not, goto error
 299 03b4 01A04AE2 		sub r10, r10, #1
 300 03b8 00005AE3 		cmp r10, #0
ARM GAS  hello.S 			page 8


 301 03bc F9FFFF1A 		bne stm3
 302              	
 303 03c0 0400A0E1 		mov r0, r4
 304 03c4 1FFFFFEB 		bl s2e_print_expression
 305 03c8 010454E3 		cmp r4, #16777216 @ 0x1000000
 306 03cc EAFFFFBA 		blt stm2_restart
 307              	
 308              		@successfully completed mem test
 309 03d0 0000A0E3 		mov r0, #0
 310 03d4 68108FE2 		adr r1, memok
 311 03d8 17FFFFEB 		bl s2e_kill_state
 312 03dc 000000EB 		bl _idle
 313 03e0 2080BDE8 		ldmfd sp!,{r5, r15}
 314              	
 315              	_idle:
 316 03e4 0000A0E1 		NOP
 317 03e8 FDFFFFEA 		B _idle
 318              	
 319              	sterr:
 320 03ec 7C108FE2 		adr r1, membadval
 321 03f0 14FFFFEB 		bl s2e_print_expression
 322 03f4 0500A0E1 		mov r0, r5
 323 03f8 5C108FE2 		adr r1, membad
 324 03fc 0EFFFFEB 		bl s2e_kill_state
 325 0400 F7FFFFEB 		bl _idle
 326              	
 327 0404 48656C6C 	msg:.asciz "Hello S2E-Android!"
 327      6F205332 
 327      452D416E 
 327      64726F69 
 327      642100
 328 0417 50616765 	val:		.asciz "Pagesize"
 328      73697A65 
 328      00
 329              	.align 2
 330 0420 4D656D63 	mem:		.asciz "Memcheck"
 330      6865636B 
 330      00
 331 0429 000000   	.align 2
 332 042c 53796D62 	symbtest:	.asciz "SymbTest"
 332      54657374 
 332      00
 333 0435 000000   	.align 2
 334 0438 466C6167 	flagtest:	.asciz "Flagtest"
 334      74657374 
 334      00
 335 0441 000000   	.align 2
 336 0444 4D656D6F 	memok: 		.asciz "Memory test passed ok"
 336      72792074 
 336      65737420 
 336      70617373 
 336      6564206F 
 337 045a 0000     	.align 2
 338 045c 4D454D4F 	membad: 	.asciz "MEMORY TEST FAILED"
 338      52592054 
 338      45535420 
 338      4641494C 
ARM GAS  hello.S 			page 9


 338      454400
 339 046f 00       	.align 2
 340 0470 42616420 	membadval: 	.asciz "Bad value"
 340      76616C75 
 340      6500
 341 047a 0000     	.align 2
 342 047c 52372063 	cnt:		.asciz "R7 counter"
 342      6F756E74 
 342      657200
 343 0487 00       	.align 2
 344 0488 61646472 	adrafter: 	.asciz "address"
 344      65737300 
 345              	.align 2
 346 0490 54657374 	labelreg5:	.asciz "Testval"
 346      76616C00 
 347              	.align 2
 348 0498 43686563 	checkmsg:	.asciz "Checkpoint"
 348      6B706F69 
 348      6E7400
 349 04a3 00       	.align 2
 350 04a4 53746174 	statebad:	.asciz "State Switch Check FAILED"
 350      65205377 
 350      69746368 
 350      20436865 
 350      636B2046 
 351 04be 0000     	.end
